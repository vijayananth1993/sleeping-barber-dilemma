// Code generated by MockGen. DO NOT EDIT.
// Source: barber_shop.go

// Package mock_barber_shop is a generated GoMock package.
package mock_barber_shop

import (
	reflect "reflect"
	customer "sleeping-barber-dilemma/customer"

	gomock "github.com/golang/mock/gomock"
)

// MockBarberShop is a mock of BarberShop interface.
type MockBarberShop struct {
	ctrl     *gomock.Controller
	recorder *MockBarberShopMockRecorder
}

// MockBarberShopMockRecorder is the mock recorder for MockBarberShop.
type MockBarberShopMockRecorder struct {
	mock *MockBarberShop
}

// NewMockBarberShop creates a new mock instance.
func NewMockBarberShop(ctrl *gomock.Controller) *MockBarberShop {
	mock := &MockBarberShop{ctrl: ctrl}
	mock.recorder = &MockBarberShopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBarberShop) EXPECT() *MockBarberShopMockRecorder {
	return m.recorder
}

// BarberReturnsToHome mocks base method.
func (m *MockBarberShop) BarberReturnsToHome() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BarberReturnsToHome")
}

// BarberReturnsToHome indicates an expected call of BarberReturnsToHome.
func (mr *MockBarberShopMockRecorder) BarberReturnsToHome() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BarberReturnsToHome", reflect.TypeOf((*MockBarberShop)(nil).BarberReturnsToHome))
}

// CustomerVisit mocks base method.
func (m *MockBarberShop) CustomerVisit(customer customer.Customer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CustomerVisit", customer)
}

// CustomerVisit indicates an expected call of CustomerVisit.
func (mr *MockBarberShopMockRecorder) CustomerVisit(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerVisit", reflect.TypeOf((*MockBarberShop)(nil).CustomerVisit), customer)
}

// GetWaitingRoom mocks base method.
func (m *MockBarberShop) GetWaitingRoom() <-chan customer.Customer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaitingRoom")
	ret0, _ := ret[0].(<-chan customer.Customer)
	return ret0
}

// GetWaitingRoom indicates an expected call of GetWaitingRoom.
func (mr *MockBarberShopMockRecorder) GetWaitingRoom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaitingRoom", reflect.TypeOf((*MockBarberShop)(nil).GetWaitingRoom))
}

// IsShopClose mocks base method.
func (m *MockBarberShop) IsShopClose() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsShopClose")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsShopClose indicates an expected call of IsShopClose.
func (mr *MockBarberShopMockRecorder) IsShopClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsShopClose", reflect.TypeOf((*MockBarberShop)(nil).IsShopClose))
}

// Open mocks base method.
func (m *MockBarberShop) Open() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Open")
}

// Open indicates an expected call of Open.
func (mr *MockBarberShopMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockBarberShop)(nil).Open))
}

// WaitTillAllBarberReturnsHome mocks base method.
func (m *MockBarberShop) WaitTillAllBarberReturnsHome() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitTillAllBarberReturnsHome")
}

// WaitTillAllBarberReturnsHome indicates an expected call of WaitTillAllBarberReturnsHome.
func (mr *MockBarberShopMockRecorder) WaitTillAllBarberReturnsHome() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitTillAllBarberReturnsHome", reflect.TypeOf((*MockBarberShop)(nil).WaitTillAllBarberReturnsHome))
}
